BROKER SCHEMA com.kingfisher.ukbq
/****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY                *
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE,                  *
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>.             *
****************************************************************************************************/
/****************************************************************************************************
* Node Name : 				TriggerControl										                     *
* Interface Id : 			TBD 																	 *
* Interface Name :			AutomaticReplayTechnicalService 										 *
* Message Flow : 			AutomaticReplayTechnicalService.msgflow									 *
* Message FlowDescription : The primary function of this message flow is to automatically trigger  	 *
                           	to get messages from predefined ERRORS.GENERIC.REPLAY queue and put  *
                           	 to it's original destination at certain interval.					     *
*                                                                                                    *
* Version 		Date 				Author 							Description                      *              
* ======= 	=========== 		=========== 		========================================         *
* 1.00 		04-July-2014	 	Abhijit Karmakar 	The initial version.                    		 *
****************************************************************************************************/

CREATE COMPUTE MODULE AutomaticReplayTechnicalService_TriggerControl
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		
		SET Environment.Control.Flag= TRUE;
		
		WHILE Environment.Control.Flag DO	  		  								
	  		PROPAGATE;
	    END WHILE;
	        	
		RETURN FALSE;
		
		
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
