BROKER SCHEMA com.kingfisher.ukbq.SalesOrder

/****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 				*
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 					*
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 			*
****************************************************************************************************/

/****************************************************************************************************
* Node Name 				: Payment_TravellerCheque												*
* Interface Id 				:  					 													*
* Interface Name 			: SalesOrder_processSalesOrder_POSBasket								*
* Message Flow 				: ProcessSalesOrder_POSBasket_RetailJ									*
* Message Flow Description 	: Convert POSBasket message to ProcessSalesOrder Mesasge				*
* Module Name 				: ProcessSalesOrder_POSBasket_RetailJ_TravellersChequeTenderItem		*
* Description 				: Populate details for TravellersChequeTenderItem						*
*																									*
* Version 	Date Author 	Author 				Description											*
* ======= 	========= 		================ 	=================== 								*
* 0.1 		1-APR-2013 		Sayantan Som 		The initial version. 								*
* 0.2 		22-JUN-2013 	Soutam Dutta 		Validated against ProcessSalesOrder xsd. 			*
****************************************************************************************************/
CREATE COMPUTE MODULE ProcessSalesOrder_POSBasket_RetailJ_TravellersChequeTenderItem
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE REF_INRoot				REFERENCE TO InputRoot.XMLNSC.POSBasket;

		DECLARE REF_OUTSalesOrder		REFERENCE TO Environment.Variables.OutMessage.NS_dfns:ProcessSalesOrder;
		DECLARE REF_OUTSalesLine		REFERENCE TO REF_OUTSalesOrder.NS_dfns:DataArea.NS_dfns:SalesOrder;
		DECLARE	REF_OUTSalesOrderHeader	REFERENCE TO REF_OUTSalesLine.NS_dfns:SalesOrderHeader;
		DECLARE REF_OUTApplicationArea	REFERENCE TO REF_OUTSalesOrder.NS_oa:ApplicationArea;
		DECLARE REF_Payment				REFERENCE TO REF_OUTSalesOrderHeader.NS_dfns:Payment;
		DECLARE TS_TimeStamp			TIMESTAMP;
		DECLARE CH_RetJTend				CHARACTER;
		
		DECLARE REF_TCTItem 			REFERENCE TO REF_INRoot.TravellersChequeTenderItem;
		DECLARE CH_LineNumber 			CHARACTER;
		DECLARE IN_Count 				INTEGER;
		
		TCTI:WHILE LASTMOVE(REF_TCTItem)DO
		--FOR REF_TCTItem AS REF_INRoot.TravellersChequeTenderItem[] DO
		
			SET CH_LineNumber = REF_TCTItem.LineNumber;
			IF REF_TCTItem.LineNumber NOT IN(Environment.LineNumber.{CH_LineNumber}[]) THEN 
				CREATE LASTCHILD OF Environment.LineNumber.{CH_LineNumber};
			
				SET IN_Count = CARDINALITY(REF_OUTSalesOrderHeader.NS_dfns:Payment[]);
			
				CREATE NEXTSIBLING OF REF_OUTSalesOrderHeader.NS_dfns:Payment[IN_Count] AS REF_Payment REPEAT;
				
	--			CREATE NEXTSIBLING OF REF_OUTSalesOrderHeader.NS_dfns:Payment AS REF_Payment REPEAT;
				
				SET REF_Payment.(XMLNSC.Attribute)type									= 'TRAVELLERS CHEQUEUE TENDER';
				IF (REF_TCTItem.TenderType IS NOT NULL) AND (REF_TCTItem.TenderSubType IS NOT NULL) THEN
					
					SET CH_RetJTend 													= REF_TCTItem.TenderType || REF_TCTItem.TenderSubType;
					
	--			    SET REF_Payment.(XMLNSC.Attribute)id 								= THE(SELECT ITEM T.TENDERID FROM Database.TENDERDATA AS T
	--																						WHERE T.RETAILJCARDTYPE = CH_RetJTend);
					
					SET REF_Payment.(XMLNSC.Attribute)id 								= THE(SELECT ITEM T.TENDERID FROM CACHE_CONFIGDATA.TENDERDATA[] AS T
																							WHERE T.RETAILJCARDTYPE = CH_RetJTend);
																							
				END IF;
				
				SET REF_Payment.NS_oa:LineNumber										= REF_TCTItem.NetValue;
				IF COALESCE(REF_TCTItem.TenderAmount,'') <> '' THEN
					
					SET REF_Payment.NS_oa:Amount										= FUNC_ConvertPennytoPound(REF_TCTItem.TenderAmount,-1,2,NULL);
					SET REF_Payment.NS_oa:Amount.(XMLNSC.Attribute)currencyID			= InputRoot.XMLNSC.POSBasket.Header.BasketCurrencyID;
				END IF; 
				
				SET TS_TimeStamp														= CAST(REF_TCTItem.DateTimeCreated AS TIMESTAMP FORMAT 'yyyy-MM-dd''T''HH:mm:ssZZZ');
				SET REF_Payment.NS_oa:StartDateTime										= CAST(TS_TimeStamp AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ssZZZ');
				SET REF_Payment.NS_oa:EndDateTime										= CAST(TS_TimeStamp AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ssZZZ');
				SET REF_Payment.NS_dfns:EntryType 										= 'Keyed';
				SET REF_Payment.NS_dfns:AuthorizingUserID 								=  REF_TCTItem.AuthorisingUserID;
				
				IF COALESCE(REF_TCTItem.VoidValue, '') <> '' THEN
					SET REF_Payment.NS_dfns:VoidStatus.NS_oa:Code 						= 'VOID ENTRY';
				END IF;
				IF COALESCE(REF_TCTItem.VoidDateTime,'') <> '' THEN
					SET TS_TimeStamp													= CAST(REF_TCTItem.VoidDateTime AS TIMESTAMP FORMAT 'yyyy-MM-dd''T''HH:mm:ssZZZ');
					SET REF_Payment.NS_dfns:VoidStatus.NS_oa:EffectiveDateTime			= CAST(TS_TimeStamp AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ssZZZ');
				END IF;
		--END FOR;
				LEAVE TCTI;
			END IF;
			MOVE REF_TCTItem NEXTSIBLING REPEAT TYPE NAME;	
		END WHILE;
		RETURN FALSE;
	END;
END MODULE;
