BROKER SCHEMA com.kingfisher.ukbq.Payment
PATH com.kingfisher.ukbq.WMBFunctions;

/****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 				*
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 					*
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 			*
****************************************************************************************************/

/****************************************************************************************************
* Node Name 				: UpdateODSWithAckSettlementStatus 										*
* Interface Id 				:  																		*
* Interface Name			: Payment_processPayment-Charge 										*
* Message Flow 				: ProcessPayment_ConfirmORReject										*
* Message Flow Description  : The primary function of this message flow is to receive canonical from*
* 							  NotifySalesOrder service and translate it into Vanguard Webservice 	*
*							  request Structure														*
* Module Name 				: UpdateODSWithAckSettlementStatus_Compute								*
* Description 				: The primary function of this Node is to receive created Payment  		*
*							  canonical and update ODS with the Settlement status and create Input 	*
*							  for VGIS Call															*
*																									*
* Version 	Date Author 	Author 				Description											*
* ======= 	========= 		================ 	=================== 								*
* 0.1		6-MAR-2013 		Asif Hossain 	    The initial version. 								*
****************************************************************************************************/
CREATE COMPUTE MODULE UpdateODSWithAckSettlementStatus_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE '%'
		BEGIN 
			PASSTHRU 'ROLLBACK';
			RESIGNAL;
		END;
		--Reference for ProcessPayment canonical
		DECLARE REF_EnvDataArea 		REFERENCE TO Environment.InputCanonical.NS_dfns:ProcessPayment.NS_dfns:DataArea;
		DECLARE REF_EnvProcPayment 		REFERENCE TO REF_EnvDataArea.NS_dfns:Payment;
		DECLARE REF_EnvProcPaymentAuth 	REFERENCE TO REF_EnvProcPayment.NS_dfns:PaymentCard.NS_dfns:PaymentAuthorization;
		DECLARE REF_SalesOrderHeader	REFERENCE TO REF_EnvDataArea.NS_dfns:SalesOrder.NS_dfns:SalesOrderHeader;
		
		--Declaring variables for update statement
		DECLARE CH_SETTLEMENTRESP 		CHARACTER;
		DECLARE CH_qryStr 				CHARACTER;	
		DECLARE CH_TransactionID 		CHARACTER;
		DECLARE CH_Token 				CHARACTER;
		DECLARE CH_SETTLED				CHARACTER;

		SET CH_TransactionID	= REF_SalesOrderHeader.NS_dfns:SalesTransaction.NS_oa:ID;
		SET CH_Token		 	= REF_EnvProcPaymentAuth.NS_dfns:Token;

		--Checking if the update is for Error condition or Success condition
		IF Environment.Variables.processMsgType = 'ERROR' THEN
			SET CH_qryStr = 'SELECT SETTLEMENTRESP FROM SALES_TRANSACTIONS_TENDER WHERE TRANSACTION_ID = '''||CH_TransactionID ||''''
							|| ' AND TOKEN = ''' || CH_Token ||''''
							|| '';
			
			SET Environment.SettleResp = PASSTHRU(CH_qryStr);
			
			IF REF_EnvProcPayment.NS_dfns:TransactionType = 'CHARGE' THEN
				SET CH_SETTLEMENTRESP = Environment.SettleResp.SETTLEMENTRESP || ' ACK RESPONSE: ERROR; ';
			END IF;
		
			IF REF_EnvProcPayment.NS_dfns:TransactionType = 'REFUND' THEN
				SET CH_SETTLEMENTRESP = Environment.SettleResp.SETTLEMENTRESP || ' ACK RESPONSE: ERROR; ';
			END IF;
			
			--Updating SALES_TRANSACTIONS_TENDER with the settlement status for ERROR scenario
			SET CH_qryStr = 'UPDATE SALES_TRANSACTIONS_TENDER SET SETTLEMENTRESP = ''' || CH_SETTLEMENTRESP ||''''
						|| ' ,SETTLED = ''N''' 
						|| ' ,LAST_SETTLEMENT_REQ_DATE = current_timestamp'
						|| ' WHERE TRANSACTION_ID = ''' || CH_TransactionID || ''''
						|| ' AND TOKEN = ''' || CH_Token || ''''
						|| '';
			PASSTHRU(CH_qryStr);
			PASSTHRU('COMMIT');
			
			THROW USER EXCEPTION VALUES('Error response returned by Vanguard/CommIdea with Error CODE: '|| Environment.Response.Error.XMLNSC.ERROR.CODE ||' and MSGTXT: ' ||Environment.Response.Error.XMLNSC.ERROR.MSGTXT);
			RETURN FALSE;
		
		ELSE
			--Retrieve the SETTLEMENTRESP coulmn value to append the new response from CommIdea
			SET CH_qryStr = 'SELECT SETTLEMENTRESP FROM SALES_TRANSACTIONS_TENDER WHERE TRANSACTION_ID = '''||CH_TransactionID ||''''
				|| ' AND TOKEN= ''' || CH_Token ||''''
				|| '';
			
			SET Environment.SettleResp = PASSTHRU(CH_qryStr);
			
			IF REF_EnvProcPayment.NS_dfns:TransactionType = 'CHARGE' THEN
				SET CH_SETTLEMENTRESP = Environment.SettleResp.SETTLEMENTRESP || ' ACK RESPONSE: ' || Environment.Response.Success.XMLNSC.NS_txn:transactionresponse.NS_txn:txnresult || '; ';
			END IF;
		
			IF REF_EnvProcPayment.NS_dfns:TransactionType = 'REFUND' THEN
				SET CH_SETTLEMENTRESP = Environment.SettleResp.SETTLEMENTRESP || ' ACK RESPONSE: ' || Environment.Response.Success.XMLNSC.NS_txn:transactionresponse.NS_txn:txnresult || '; ';
			END IF;
					
			IF REF_EnvProcPaymentAuth.NS_dfns:VGISReferenceID <> '' THEN
				SET CH_SETTLED = 'N';
			ELSE
				SET CH_SETTLED = 'S';	
			END IF;
			
			--Updating SALES_TRANSACTIONS_TENDER with the settlement status for success scenario
			SET CH_qryStr = 'UPDATE SALES_TRANSACTIONS_TENDER SET SETTLEMENTRESP = ''' || CH_SETTLEMENTRESP ||''''
						|| ' ,SETTLED = ''' || CH_SETTLED ||''''
						|| ' ,LAST_SETTLEMENT_REQ_DATE = current_timestamp'
						|| ' WHERE TRANSACTION_ID = ''' || CH_TransactionID || ''''
						|| ' AND TOKEN = ''' || CH_Token || ''''
						|| '';
			PASSTHRU(CH_qryStr);
			PASSTHRU('COMMIT');
			
			--Checking VGIS call is applicable or not.If yes then create the output structure which is input to VGIS from environment 
			IF UPPER(REF_EnvProcPayment.NS_dfns:TransactionType) = 'REFUND' AND STARTSWITH(REF_EnvProcPayment.(XMLNSC.Attribute)id,'VisaProcurement')THEN
				
				SET OutputRoot.XMLNSC.NS_dfns:ProcessPayment	= Environment.InputCanonical.NS_dfns:ProcessPayment;
				RETURN TRUE;
			ELSE
				RETURN FALSE;
			END IF;
			
		END IF;
		
	END;
	
END MODULE;
