BROKER SCHEMA com.kingfisher.ukbq.Payment
--PATH com.kingfisher.ukbq.WMBFunctions;

/****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 				*
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 					*
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 			*
****************************************************************************************************/

/****************************************************************************************************
* Node Name 				: MapVanguardAckResponse 												*
* Interface Id 				:  																		*
* Interface Name			: Payment_processPayment-Charge 										*
* Message Flow 				: ProcessPayment_ConfirmORReject										*
* Message Flow Description  : The primary function of this message flow is to receive Charge flow	* 
*							  output and translate it into Vanguard Webservice request Structure.	*
*							  for confirmation call													*
* Module Name 				: MapVanguardAckResponse_Compute 										*
* Description 				: The primary function of this Node is to receive response from 		*
* 							  Vanguard and parse the receieved response to create Payment canonical *
*							  to use in the next Node.												*
*																									*
* Version 	Date Author 	Author 				Description											*
* ======= 	========= 		================ 	=================== 								*
* 0.1		6-MAR-2013 		Asif Hossain 		The initial version. 								*
****************************************************************************************************/
CREATE COMPUTE MODULE MapVanguardAckResponse_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Declaring reference for input and response mapping 
		DECLARE REF_MsgResult 	REFERENCE TO InputRoot.XMLNSC.NS_comns:ProcessMsgResponse.NS_comns:ProcessMsgResult;
		DECLARE REF_Payment	 	REFERENCE TO OutputRoot.XMLNSC.Payment;
		DECLARE REF_PaymentAuth REFERENCE TO REF_Payment.NS_dfns:PaymentCard.NS_dfns:PaymentAuthorization;
		
		--Storing part of CommIdea response in the Environment to use as a condition before updating ODS.
		SET Environment.Variables.processMsgType = REF_MsgResult.NS_comns:MsgType;
		
		--Parse the CDATA section from the incoming xml message and store it in Environment
		IF REF_MsgResult.NS_comns:MsgType <> '' AND REF_MsgResult.NS_comns:MsgType = 'ERROR' THEN
        	CREATE LASTCHILD OF Environment.Response.Error DOMAIN ('XMLNSC') PARSE(REF_MsgResult.NS_comns:MsgData CCSID InputRoot.Properties.CodedCharSetId); 
		ELSE
			CREATE LASTCHILD OF Environment.Response.Success DOMAIN ('XMLNSC') PARSE(REF_MsgResult.NS_comns:MsgData CCSID InputRoot.Properties.CodedCharSetId);  	
		END IF; 

		RETURN TRUE;
	END;
END MODULE;
