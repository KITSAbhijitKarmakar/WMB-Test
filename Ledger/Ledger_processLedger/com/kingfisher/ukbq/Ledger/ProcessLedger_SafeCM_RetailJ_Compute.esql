BROKER SCHEMA com.kingfisher.ukbq.Ledger
PATH com.kingfisher.ukbq.WMBFunctions;

/****************************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS 			*
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 							*
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 								*
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 						*
****************************************************************************************************************/

/****************************************************************************************************************
* Node Name 				:	 Create_ProcessLedger_Canonical													* 
* Interface Id 				:  																					*
* Interface Name 			:	 Ledger_processLedger															*
* Message Flow 				:	 ProcessLedger_SafeCM_RetailJ													*
* Message Flow Description  : 	 The primary function of this capability is to update the SALES_  				*
*							  	 TRANSACTIONS_COUNT and SALES_TRANSACTIONS_TENDER tables of ODS and 			*
*                             	 RETJCASHLD table of CDB with SafeCM details.									*
*								 The capability takes input message from MQInput queue and traverses 			*
*                             	 the flow as below:		                                                        *
*							  	 1.	The flow converts the input message to generate the ProcessLedger xml.      *
*							  	 2.	Inserts the SafeCM details into the ODS and CDB database .                  *
* Module Name 				: 	 ProcessLedger_SafeCM_RetailJ_Compute 											*
* Description 				: 	 The module will loop through the SafeCMAction xml and transform it into       	*
* 							  	 ProcessLedger xml																*
*																												*
* Version 	Date 			Author 						Description 											*
* ======= 	===========	  	======================= 	================================						*
* 0.1 	  	09-Apr-2013   	Sourav Banu					The initial version. 									*
*****************************************************************************************************************/

CREATE COMPUTE MODULE ProcessLedger_SafeCM_RetailJ_Compute
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--Call the procedure PROC_SafeCMMapping() 
		CALL PROC_SafeCMMapping();
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;
		RETURN TRUE;
		
		
	END;
	
	/********************************************************************************************
	* Procedure Name	: PROC_SalesTransactionLine()								 		 	*
	* Input Parameters	: CH_UserId, REF_TotalValSum, REF_CMAction, REF_CountedValue, 			*
	*					  REF_DiscrepancyValue													*
	* Output Parameters	: None 																 	*
	* Description		: The procedure will set values to the LedgerLine					 	*
	*					  								                                     	*
	* Version 	Date 			Author 			Description                                  	*
	* ======= 	============ 	=========== 	================================ 			 	*
	*  0.1   	09-APR-2013 	Sourav Banu 	The initial version. 						 	*
	********************************************************************************************/
	
	CREATE PROCEDURE PROC_SalesTransactionLine (IN CH_UserId CHARACTER,IN REF_TotalValSum REFERENCE,IN REF_CMAction REFERENCE,IN REF_CountedValue REFERENCE,IN REF_DiscrepancyValue REFERENCE)
	BEGIN
	    --Reference declaration
		DECLARE REF_ProcessLedger          	REFERENCE TO OutputRoot.XMLNSC.NS_dfns:ProcessLedger;
		DECLARE REF_Ledger              	REFERENCE TO REF_ProcessLedger.NS_dfns:DataArea.NS_dfns:Ledger;
		DECLARE REF_ApplicationArea     	REFERENCE TO REF_ProcessLedger.NS_oa:ApplicationArea;
		DECLARE REF_LedgerHeader        	REFERENCE TO REF_Ledger.NS_dfns:LedgerHeader;
		DECLARE REF_LedgerLine				REFERENCE TO REF_Ledger.NS_dfns:LedgerLine;
		DECLARE REF_Session             	REFERENCE TO REF_LedgerHeader.NS_dfns:Session;
		DECLARE REF_Desc 					REFERENCE TO REF_LedgerLine.NS_oa:Description;
		
		--Declaring Variables
		DECLARE CH_SummaryTenderID			CHARACTER;
		DECLARE CH_ArrayVariable			CHARACTER;
		DECLARE IN_PositionOfDot			INTEGER;
		DECLARE BO_Flag						BOOLEAN FALSE;
		
		--Creating field references
		IF COALESCE(REF_DiscrepancyValue.Value,'') <> '' THEN
			IF CAST(REF_DiscrepancyValue.Value AS DECIMAL) <> 0 THEN
				SET BO_Flag	= TRUE;
			END IF;
					
		END IF;
		
		IF UPPER(CH_UserId) <> 'INTERNAL2' OR (CH_UserId = 'INTERNAL2' AND BO_Flag	= TRUE )THEN
		
			CREATE LASTCHILD OF REF_Ledger AS REF_LedgerLine NAMESPACE NS_dfns NAME 'LedgerLine';
			CREATE LASTCHILD OF REF_LedgerLine  AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'SafeCM';
			
			SET REF_Desc.(XMLNSC.Attribute)type								= 'TRANSACTION LINE TYPE';
			
			IF CH_UserId = 'INTERNAL' THEN
				
				CREATE LASTCHILD OF REF_LedgerLine AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'EndOfWeek';
				SET REF_Desc.(XMLNSC.Attribute)type							= 'TENDER CONTROL TYPE';
				
			ELSE
				
				CREATE LASTCHILD OF REF_LedgerLine AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'SafeDiscrepancy';
				SET REF_Desc.(XMLNSC.Attribute)type							= 'TENDER CONTROL TYPE';  
				
			END IF;
			
			
			
			
			SET REF_ApplicationArea.NS_oa:Sender.NS_oa:LogicalID			= 'EPOSCASHO';
			
			-- Setting Amount Attribute of payment  based on ActionType
		   	IF CH_UserId = 'INTERNAL' THEN
		   		
				SET REF_LedgerLine.NS_dfns:Payment.(XMLNSC.Attribute)id		= REF_CountedValue.TenderID; 
				SET REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount				= ROUND(CAST(REF_CountedValue.Value AS DECIMAL)/-100 ,2 MODE ROUND_HALF_UP);
				SET REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount.(XMLNSC.Attribute)currencyID = REF_CMAction.BaseCurrencyID;
				  
		   	ELSE
		   		
				SET REF_LedgerLine.NS_dfns:Payment.(XMLNSC.Attribute)id		= REF_DiscrepancyValue.TenderID;
				SET REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount				= ROUND(CAST(REF_DiscrepancyValue.Value AS DECIMAL)/-100 ,2 MODE ROUND_HALF_UP);
				SET REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount.(XMLNSC.Attribute)currencyID = REF_CMAction.BaseCurrencyID;
				
			END IF;
			
			IF CH_UserId = 'INTERNAL2'   THEN
				
				IF REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount <> '0' THEN
					SET REF_LedgerLine.NS_oa:ReasonCode						= REF_CMAction.ReasonCode;
			
					--Calling PadLeadingCharacters() in WMBFunction to pad Leading zeros 
					SET REF_LedgerLine.NS_oa:ActionCodes.NS_oa:Code			= PadLeadingCharacters(2,REF_CMAction.ActionType,'0') ;
				END IF;
				
			ELSE
				
				SET REF_LedgerLine.NS_oa:ReasonCode							= REF_CMAction.ReasonCode;
				
				--Calling PadLeadingCharacters() in WMBFunction to pad Leading zeros 
				SET REF_LedgerLine.NS_oa:ActionCodes.NS_oa:Code				= PadLeadingCharacters(2,REF_CMAction.ActionType,'0') ;
				
			END IF;		
			
			SET CH_SummaryTenderID											= REF_LedgerLine.NS_dfns:Payment.(XMLNSC.Attribute)id;
			SET Environment.Variables  										= NULL;
			WHILE (LENGTH(CH_SummaryTenderID) > 0) DO
				
		          SET IN_PositionOfDot			    						= POSITION('|' IN CH_SummaryTenderID);
		          
				  IF IN_PositionOfDot	<> 0 THEN
				     SET CH_ArrayVariable 									= SUBSTRING(CH_SummaryTenderID FROM 1 FOR IN_PositionOfDot - 1);
				     SET CH_SummaryTenderID		    						= SUBSTRING(CH_SummaryTenderID FROM IN_PositionOfDot + 1);
				  ELSE
				     SET CH_ArrayVariable									= CH_SummaryTenderID;
				     SET CH_SummaryTenderID									= NULL;
			      END IF;
			      
		          CREATE LASTCHILD OF Environment.Variables NAME 'CH_SummaryTenderID' VALUE CH_ArrayVariable;
		          
		    END WHILE;
			
			--Retrieves the TENDERID information from TENDERDATA table
			SET REF_LedgerLine.NS_dfns:Payment.(XMLNSC.Attribute)id			= THE(SELECT ITEM  A.TENDERID FROM  Database.TENDERDATA AS A
			          	                                                      WHERE A.RETAILJCARDTYPE = (Environment.Variables.CH_SummaryTenderID[1]||Environment.Variables.CH_SummaryTenderID[2]));
		END IF;		          	                                                      
	END;
	

	/*****************************************************************************************
	* Procedure Name	: PROC_SafeCMMapping() 									 			 *
	* Input Parameters	: None 																 *
	* Output Parameters	: None 																 *
	* Description		: The procedure will loop through the SafeCMAction xml and    	     *
	*					  transform it into	ProcessLedger xml								 *
	*																						 *
	* Version 	Date 			Author 			Description                                  *
	* ======= 	============ 	=========== 	================================ 			 *
	*  0.1   	09-APR-2013 	Sourav Banu 	The initial version. 						 *
	*****************************************************************************************/	
	
    CREATE PROCEDURE PROC_SafeCMMapping() BEGIN
    	
	    --Input reference declaration
	    DECLARE REF_CMAction 			    REFERENCE TO InputRoot.XMLNSC.SafeCMAction;
		DECLARE REF_TotalValSumCol			REFERENCE TO REF_CMAction.TotalValuesSummaryCollection;
		DECLARE REF_TotalValSum	        	REFERENCE TO REF_TotalValSumCol.TotalValuesSummary;
		DECLARE REF_TenderValue         	REFERENCE TO REF_CMAction.TenderValue;
		DECLARE REF_CountedValue        	REFERENCE TO REF_TotalValSum.CountedValue;
		DECLARE REF_DiscrepancyValue    	REFERENCE TO REF_TotalValSum.DiscrepancyValue;
		
	    -- Output reference declaration
		DECLARE REF_ProcessLedger          	REFERENCE TO OutputRoot.XMLNSC.NS_dfns:ProcessLedger;
		DECLARE REF_Ledger              	REFERENCE TO REF_ProcessLedger.NS_dfns:DataArea.NS_dfns:Ledger;
		DECLARE REF_ApplicationArea     	REFERENCE TO REF_ProcessLedger.NS_oa:ApplicationArea;
		DECLARE REF_LedgerHeader        	REFERENCE TO REF_Ledger.NS_dfns:LedgerHeader;
		DECLARE REF_LedgerLine				REFERENCE TO REF_Ledger.NS_dfns:LedgerLine;
		DECLARE REF_Session             	REFERENCE TO REF_LedgerHeader.NS_dfns:Session;
		DECLARE REF_Desc 					REFERENCE TO REF_LedgerLine.NS_oa:Description;
		
		--Variable declaration
		DECLARE CH_FinalString              CHARACTER;
		DECLARE CH_StoreCode 				CHARACTER;
		DECLARE CH_Date                     CHARACTER;
		DECLARE CH_Time						CHARACTER;
		DECLARE CH_SummaryTenderID          CHARACTER;
		DECLARE CH_ArrayVariable			CHARACTER;	
		DECLARE CH_retailJTenderID    		CHARACTER;
		DECLARE CH_ActionType				CHARACTER;
		DECLARE CH_ValueRetailJTenderID		CHARACTER;
		DECLARE CH_InstanceID				CHARACTER;
		DECLARE CH_UserId					CHARACTER;
		DECLARE CH_FirstInstance			CHARACTER;
		DECLARE TS_Date						TIMESTAMP;
		DECLARE IN_PositionOfDot 			INTEGER;
		DECLARE DC_Value					DECIMAL;
		
		
		--Creation Of Output references Fields
		CREATE LASTCHILD OF OutputRoot AS REF_ProcessLedger DOMAIN('XMLNSC') NAME 'XMLNSC';
	    CREATE LASTCHILD OF REF_ProcessLedger AS REF_ProcessLedger NAMESPACE NS_dfns NAME 'ProcessLedger';
	    
	    --Set the namespace and headers
	    SET REF_ProcessLedger.(XMLNSC.NamespaceDecl)xmlns 				= NS_dfns;
	    SET REF_ProcessLedger.(XMLNSC.NamespaceDecl)xmlns:oa   			= NS_oa;
	    SET REF_ProcessLedger.(XMLNSC.Attribute)releaseID				= '1.0';
	    SET REF_ProcessLedger.(XMLNSC.Attribute)languageCode			= 'en';

		-- Create Application Area
	    CREATE LASTCHILD OF REF_ProcessLedger AS REF_ApplicationArea NAMESPACE NS_oa	  NAME 'ApplicationArea';
	    
		-- Set the Application Area value
		SET REF_ApplicationArea.NS_oa:Sender.NS_oa:LogicalID            = 'EPOSCASHO'; 
		SET	REF_ApplicationArea.NS_dfns:CreationDateTime 				= CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss'); 
		
		-- Create Data Area
	    CREATE LASTCHILD OF REF_ProcessLedger AS REF_Ledger NAMESPACE NS_dfns NAME 'DataArea';	    
	    CREATE FIELD REF_Ledger.NS_oa:Load;
	    CREATE FIELD REF_Ledger.NS_dfns:Ledger 			AS REF_Ledger;
	    CREATE FIELD REF_Ledger.NS_dfns:LedgerHeader 	AS REF_LedgerHeader;
	    
		--Retrieves the GENERICSTORECODE information from MBSTRCD table
	    SET CH_StoreCode 												= THE(SELECT ITEM MB.GENERICSTORECODE FROM Database.MBSTRCD AS MB 
                                             							  WHERE MB.FULLSTORECODE =  REF_CMAction.StoreID);
                                             
	    -- Generating the Transaction ID to be used downstream					
	    SET TS_Date														= CAST(REF_CMAction.CreationDate AS TIMESTAMP FORMAT 'yyyy-MM-dd''T''HH:mm:ssZZZ');
	    SET CH_Date														= CAST(TS_Date AS CHARACTER FORMAT 'yyyyMMdd');
	    SET CH_Time														= CAST(TS_Date AS CHARACTER FORMAT 'HHmmss');
	    SET CH_FinalString												= CH_StoreCode || '-' || CH_Date || '-'|| CH_Time ||'-'||REF_CMAction.SafeNumber|| '-'||REF_CMAction.SequenceNumber;	    
		SET REF_LedgerHeader.NS_oa:ID                                   = CH_FinalString;
		SET REF_LedgerHeader.NS_oa:Description.(XMLNSC.Attribute)type	= 'TRANSACTION TYPE' ;
		SET REF_LedgerHeader.NS_oa:Description 							= 'TenderControlTransaction' ;
	    SET REF_LedgerHeader.NS_oa:Note                                	= REF_CMAction.Notes;
	    	
		IF COALESCE(CH_StoreCode,'')<>'' THEN
		   SET REF_LedgerHeader.NS_oa:SourceID                          = CH_StoreCode;	
		END IF;
		
		--IF COALESCE(REF_CMAction.SafeNumber,'')<>'' THEN
		   SET REF_LedgerHeader.NS_dfns:WorkstationID                   = 'POS.'||COALESCE(REF_CMAction.SafeNumber,'') || '.1' ;	
		--END IF;
	      	
	    SET REF_LedgerHeader.NS_dfns:TillID                             = REF_CMAction.SafeNumber;
	    SET REF_LedgerHeader.NS_dfns:OperatorID                         = REF_CMAction.UserID;
	    
	    IF REF_CMAction.TrainingMode = '1' THEN
		   SET REF_LedgerHeader.NS_dfns:TrainingModeIndicator 			= 'true';
		END  IF;
			
		SET CH_Time               										= CAST(TS_Date AS CHARACTER FORMAT 'HH:mm:ss');
		
		--Format the StartDateTime and EndDateTime into 'yyyy-MM-dd''T''HH:mm:ss'
		SET REF_LedgerHeader.NS_oa:StartDateTime                   		= REF_CMAction.CreationDate;
		SET REF_LedgerHeader.NS_oa:EndDateTime                     		= REF_CMAction.CreationDate;
		SET REF_LedgerHeader.NS_oa:StartDateTime                   		= REF_CMAction.CreationDate;
		
	    --Calling the oracle package getNextBusinessDayDate 
		SET REF_LedgerHeader.NS_dfns:BusinessDayID						= getNextBusinessDayDate('EPOSBDD' || CH_StoreCode);
	    SET REF_LedgerHeader.NS_oa:CurrencyCode                    		= REF_CMAction.BaseCurrencyID;
	    SET REF_LedgerHeader.NS_oa:ActionCodes.NS_oa:Code          		= REF_CMAction.ActionType;
	    
	    IF COALESCE(REF_CMAction.SessionDate,'') <> '' THEN
			CREATE LASTCHILD OF REF_LedgerHeader AS REF_Session	 NAMESPACE NS_dfns NAME 'Session';
			SET REF_Session.NS_oa:Type									= 'CURRENT';
			SET REF_Session.NS_oa:StartDateTime							= REF_CMAction.SessionDate;
		END IF;        					     	 
	    
	    IF COALESCE(REF_CMAction.NextSessionStartDate,'') <> '' THEN
	   	    CREATE LASTCHILD OF REF_LedgerHeader AS REF_Session	 NAMESPACE NS_dfns NAME 'Session';
	        SET REF_Session.NS_oa:Type					           		= 'NEXT';
			SET REF_Session.NS_oa:StartDateTime 		          		= REF_CMAction.NextSessionStartDate;
	    END IF; 
	    
	    SET REF_LedgerHeader.NS_dfns:SafeID								= REF_CMAction.SafeNumber;
	    SET REF_LedgerHeader.NS_oa:Sequence						   		= REF_CMAction.SequenceNumber;
	    --SET REF_LedgerHeader.NS_oa:Sequence                        	= REF_CMAction.TradingRegionID;
	    SET REF_LedgerHeader.NS_oa:CountryCode							= REF_CMAction.TradingRegionID;
	    
	    IF REF_CMAction.ActionType = '27' THEN
	    	
	    	--Loop through TotalValueSummary
	    	WHILE LASTMOVE(REF_TotalValSum) DO
	    		
	    		MOVE REF_DiscrepancyValue TO REF_TotalValSum.DiscrepancyValue;
	    		MOVE REF_CountedValue TO REF_TotalValSum.CountedValue;
	    		
	    	    SET CH_SummaryTenderID 	   								= REF_TotalValSum.TenderID;
	    	    SET Environment.Variables  								= NULL;	
	    	    
	    	    --Split CH_SummaryTenderID with respect to 	'|' and concat the 1st and 2nd element after split.	
				WHILE (LENGTH(CH_SummaryTenderID) > 0) DO
					
			          SET IN_PositionOfDot			    				= POSITION('|' IN CH_SummaryTenderID);
			          
					  IF IN_PositionOfDot	<> 0 THEN
					     SET CH_ArrayVariable 							= SUBSTRING(CH_SummaryTenderID FROM 1 FOR IN_PositionOfDot - 1);
					     SET CH_SummaryTenderID		    				= SUBSTRING(CH_SummaryTenderID FROM IN_PositionOfDot + 1);
					  ELSE
					     SET CH_ArrayVariable							= CH_SummaryTenderID;
					     SET CH_SummaryTenderID							= NULL;
				      END IF;
				      
			          CREATE LASTCHILD OF Environment.Variables NAME 'CH_SummaryTenderID' VALUE CH_ArrayVariable;
			          
			    END WHILE;
				
				SET CH_retailJTenderID									= Environment.Variables.CH_SummaryTenderID[1]||Environment.Variables.CH_SummaryTenderID[2];
				
				IF CH_retailJTenderID NOT IN('30','60','130','180','240') THEN
					
					SET CH_UserId										= REF_CMAction.UserID;
					
					--Call the procedure PROC_SalesTransactionLine()
				    CALL PROC_SalesTransactionLine(CH_UserId,REF_TotalValSum,REF_CMAction,REF_CountedValue,REF_DiscrepancyValue);

				    IF  REF_CMAction.UserID = 'INTERNAL'  THEN				    	
				    	SET CH_UserId									= 'INTERNAL2'; 
				    	--Call the procedure PROC_SalesTransactionLine()
					    CALL PROC_SalesTransactionLine(CH_UserId,REF_TotalValSum,REF_CMAction,REF_CountedValue,REF_DiscrepancyValue);					    
				    END IF;
				    
				END IF;  
				
				MOVE REF_TotalValSum NEXTSIBLING REPEAT TYPE NAME;
				
		   	END WHILE;
		 END IF;
		 
		 SET CH_ActionType 												= REF_CMAction.ActionType; 	
		 
		 IF  CH_ActionType IN ('21','29','32','33','35','36') THEN
			
			SET CH_FirstInstance										= 'true';			 	
		 	 --Loop through TenderVelue
		     WHILE LASTMOVE(REF_TenderValue) DO
		     	
		     	SET CH_SummaryTenderID 	   								= REF_TenderValue.TenderID;
	    	    SET Environment.Variables  								= NULL;	
	    	    
	    	    --Split CH_SummaryTenderID with respect to 	'|' and concat the 1st and 2nd element after split.	
				WHILE (LENGTH(CH_SummaryTenderID) > 0) DO
					
			          SET IN_PositionOfDot			    				= POSITION('|' IN CH_SummaryTenderID);
			          
					  IF IN_PositionOfDot	<> 0 THEN
					     SET CH_ArrayVariable 							= SUBSTRING(CH_SummaryTenderID FROM 1 FOR IN_PositionOfDot - 1);
					     SET CH_SummaryTenderID		    				= SUBSTRING(CH_SummaryTenderID FROM IN_PositionOfDot + 1);
					  ELSE
					     SET CH_ArrayVariable							= CH_SummaryTenderID;
					     SET CH_SummaryTenderID							= NULL;
				      END IF;
				      
			          CREATE LASTCHILD OF Environment.Variables NAME 'CH_SummaryTenderID' VALUE CH_ArrayVariable;
			          
			    END WHILE;
				
				SET CH_retailJTenderID									= Environment.Variables.CH_SummaryTenderID[1] || Environment.Variables.CH_SummaryTenderID[2];
				
				IF CH_retailJTenderID NOT IN('30','60','130','180','240') THEN
		     	 
				     CREATE LASTCHILD OF REF_Ledger AS REF_LedgerLine NAMESPACE NS_dfns NAME 'LedgerLine';
				     
				     IF CH_ActionType IN('33','36') THEN
				     	
				     	IF CH_FirstInstance = 'true' THEN
				     		SET DC_Value 										= CAST(COALESCE(REF_CMAction.TaxAmount,'0') AS DECIMAL);
				     		SET DC_Value										= DC_Value / -100; 
				        	SET DC_Value 										= ROUND(DC_Value,2  MODE ROUND_HALF_UP);
				        	SET REF_LedgerLine.NS_oa:TaxBaseAmount           	= DC_Value;
				        	SET REF_LedgerLine.NS_oa:TaxBaseAmount.(XMLNSC.Attribute)currencyID = REF_CMAction.BaseCurrencyID;
					     	SET CH_FirstInstance 							= 'false';
					     ELSE
				     		SET REF_LedgerLine.NS_oa:TaxBaseAmount           	= '0';
				        	SET REF_LedgerLine.NS_oa:TaxBaseAmount.(XMLNSC.Attribute)currencyID = REF_CMAction.BaseCurrencyID;
				        	
				     	 END IF;
				        
				     END IF;
				     
				     CREATE LASTCHILD OF REF_LedgerLine AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'SafeCM';			     
				     SET REF_Desc.(XMLNSC.Attribute)type                 	= 'TRANSACTION LINE TYPE';
				     
				     IF CH_ActionType IN('33','36') THEN
				     	
				     	CREATE LASTCHILD OF REF_LedgerLine AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'SafeCMExpenses';
				     	SET REF_Desc.(XMLNSC.Attribute)type             	= 'TENDER CONTROL TYPE';
						
					 ELSEIF CH_ActionType IN('32','35')   THEN
					 	
					 	CREATE LASTCHILD OF REF_LedgerLine AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'SafeCMIncome';
					 	SET REF_Desc.(XMLNSC.Attribute)type             	= 'TENDER CONTROL TYPE';
						
				     ELSEIF CH_ActionType IN('21','29') THEN
				     	
				     	CREATE LASTCHILD OF REF_LedgerLine AS REF_Desc	NAMESPACE NS_oa NAME 'Description' VALUE 'SafeCMBanking';
				     	SET REF_Desc.(XMLNSC.Attribute)type             	= 'TENDER CONTROL TYPE';
						
				     END IF;
				     
				     SET REF_LedgerLine.NS_oa:ReasonCode              		= REF_CMAction.ReasonCode;
				     
				     --Calling PadLeadingCharacters() in WMBFunction to pad Leading zeros 
				     SET REF_LedgerLine.NS_oa:ActionCodes.NS_oa:Code       	= PadLeadingCharacters(2,CH_ActionType,'0') ;
				     SET CH_SummaryTenderID 	   							= REF_TenderValue.TenderID;
			    	 SET Environment.Variables 								= NULL;	
			    	 
			    	 --Split CH_SummaryTenderID with respect to '|'		
					 WHILE (LENGTH(CH_SummaryTenderID) > 0) DO
					 	
					      SET IN_PositionOfDot			    				= POSITION('|' IN CH_SummaryTenderID);
					      
						  IF IN_PositionOfDot <> 0 THEN
						     SET CH_ArrayVariable 							= SUBSTRING(CH_SummaryTenderID FROM 1 FOR IN_PositionOfDot - 1);
						     SET CH_SummaryTenderID		    				= SUBSTRING(CH_SummaryTenderID FROM IN_PositionOfDot + 1);
						  ELSE
							 SET CH_ArrayVariable							= CH_SummaryTenderID;
							 SET CH_SummaryTenderID							= NULL;
						  END IF;
						  
					      CREATE LASTCHILD OF Environment.Variables NAME 'CH_SummaryTenderID' VALUE CH_ArrayVariable;
					      
					  END WHILE;
					  
					  SET CH_ValueRetailJTenderID							= Environment.Variables.CH_SummaryTenderID[1]||Environment.Variables.CH_SummaryTenderID[2];
					  
					  --Retrieves the TENDERID information from TENDERDATA table
					  SET REF_LedgerLine.NS_dfns:Payment.(XMLNSC.Attribute)id = THE(SELECT ITEM  A.TENDERID FROM  Database.TENDERDATA AS A
			          	                                                           WHERE A.RETAILJCARDTYPE = CH_ValueRetailJTenderID);
			          
				      SET DC_Value 											= CAST(REF_TenderValue.Value  AS DECIMAL);
				      SET DC_Value 											= DC_Value / -100; 
				      SET DC_Value 											= ROUND(DC_Value,2  MODE ROUND_HALF_UP);
				      SET REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount       = DC_Value;
				      SET REF_LedgerLine.NS_dfns:Payment.NS_oa:Amount.(XMLNSC.Attribute)currencyID = REF_CMAction.BaseCurrencyID;
			      
				END IF;
				
			    MOVE REF_TenderValue NEXTSIBLING REPEAT TYPE NAME;
			 END WHILE;	
		 END IF;
	    END;	
END MODULE;

