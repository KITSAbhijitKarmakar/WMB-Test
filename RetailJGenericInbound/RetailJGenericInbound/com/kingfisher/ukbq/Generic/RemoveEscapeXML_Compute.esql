BROKER SCHEMA com.kingfisher.ukbq.Generic

/****************************************************************************************************
* COPYRIGHT. <KINGFISHER INFORMATION TECHNOLOGY SERVICES 2012> ALL RIGHTS RESERVED. NO PART OF THIS *
* SOURCE CODE MAY BE REPRODUCED, STORED IN A RETRIEVAL SYSTEM, OR TRANSMITTED,IN ANY 				*
* FORM BY ANY MEANS, ELECTRONIC, MECHANICAL, PHOTOCOPYING, RECORDING OR OTHERWISE, 					*
* WITHOUT THE PRIOR WRITTEN PERMISSION OF <KINGFISHER INFORMATION TECHNOLOGY SERVICES>. 			*
****************************************************************************************************/

/****************************************************************************************************
* Node Name 				: RemoveEscapeXML														*
* Interface Id 				:  																		*
* Interface Name 			: RetailJGenericInbound													*
* Message Flow 				: Generic_RetailJ_Inbound												*
* Message Flow Description  : The primary function of this message flow is to receive the JMS input *
* 							  and check if the transaction is valid or not. If valid it routes the  *
* 							  based on the message type to SafeCM or TerminalCM or POSBasket flows  *
* Module Name 				: RemoveEscapeXML_Compute				 								*
* Description 				: The primary function of this node is to receive the JMS input and     *
*                             replace the non xml compliant characters.			                    *
*																									*
* Version 	Date Author 	Author 				Description											*
* ======= 	========= 		================ 	=================== 								*
* 0.1 		25-JUN-2013 	Asif Hossain		The initial version. 								*
****************************************************************************************************/
CREATE COMPUTE MODULE RemoveEscapeXML_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE wholeMsgBlob 	BLOB ASBITSTREAM(InputRoot.XMLNSC,InputRoot.Properties.Encoding,InputRoot.Properties.CodedCharSetId );
		DECLARE wholeMsgChar 	CHAR CAST(wholeMsgBlob AS CHAR CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		DECLARE REF_Message 	REFERENCE TO Environment;		


		SET Environment.Message 	= EscapeXML(wholeMsgChar,'Notes');
		
		SET OutputRoot.Properties 	= InputRoot.Properties;
		SET OutputRoot.MQMD 		= InputRoot.MQMD;
		
		CREATE LASTCHILD OF OutputRoot AS REF_Message DOMAIN ('XMLNSC') PARSE (Environment.Message
		CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		
		RETURN TRUE;
	END;

	/************************************************************************************
	* Function Name      :EscapeXML      				            			        *
	* Input Parameters   :InputXML,ElementName          			                    *
	* Output Parameters  :None							                                *
	* Description        :Convert non xml compliant characters to xml compliant 		*
	*					  characters													*
	* Version 	Date 			Author 			Description                             *
	* ======= 	=========== 	============ 	================================        *
	*  0.1   	25-JUN-2013 	Asif Hossain 	The initial version.                    *
	************************************************************************************/
	CREATE FUNCTION EscapeXML(InputXML CHARACTER, ElementName CHARACTER) RETURNS CHARACTER

	BEGIN

		DECLARE CH_ret CHARACTER '';
		DECLARE CH_input CHARACTER InputXML;
		DECLARE CH_elemVal CHARACTER;
		DECLARE CH_Strt CHARACTER '<'||ElementName||'>';
		DECLARE CH_End CHARACTER '</'||ElementName||'>';
		DECLARE IN_Strt INTEGER 0;
		DECLARE IN_End INTEGER 0;

		SET IN_Strt = POSITION(CH_Strt IN CH_input);

		WHILE IN_Strt<>0 DO

			SET IN_Strt = IN_Strt + LENGTH(CH_Strt);
			SET IN_End = POSITION(CH_End IN CH_input);
			SET CH_elemVal = SUBSTRING(CH_input FROM IN_Strt FOR (IN_End - IN_Strt));
			SET CH_elemVal = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CH_elemVal,'&','&amp;'),'<','&lt;'),'>','&gt;'),'"','&quot;'),'''','&apos;');
			SET CH_ret = CH_ret || SUBSTRING(CH_input BEFORE CH_Strt) || CH_Strt || CH_elemVal || CH_End;
			SET CH_input = SUBSTRING(CH_input AFTER CH_End);
			SET IN_Strt = POSITION(CH_Strt IN CH_input);

		END WHILE;

		SET CH_ret = CH_ret || CH_input;

		RETURN CH_ret;

	END;
	
END MODULE;
